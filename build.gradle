apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'me.sneer'
version = '0.1.0'
description = 'API for Sneer, the sovereign platform.' 
ext.packaging = 'jar'


def isDevBuild
def isCiBuild
def isReleaseBuild

def sonatypeRepositoryUrl

if(hasProperty("release")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("ci")) {
    isCiBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    isDevBuild = true
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.8+'
    }
}

repositories {
    mavenCentral()
}

configurations {
  libs
  compile.extendsFrom libs
}

dependencies {
    libs 'us.bpsm:edn-java:0.4.4'
    libs 'com.netflix.rxjava:rxjava-android:0.17.5'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"
    
    defaultConfig {
     minSdkVersion 14
     targetSdkVersion 18
 }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            aidl.srcDir 'src'
            java.srcDir 'src'
            res.srcDir 'res'
        }
    }
}

task copyLibs(type: Copy) {
  into "libs"
  from configurations.libs
}


android.libraryVariants.all { variant ->
	if (!variant.name.equals("release")) return
    
	task jarNodeps(type: Jar) {
        from variant.javaCompile.destinationDir
        from variant.processResources.resDir
	
	    appendix = "nodeps"
	
	    from { configurations.libs.collect { it.isDirectory() ? it : zipTree(it) } }
	}
	
    task javadocRelease(type: Javadoc) {
        description = "Generates javadoc for release"
        destinationDir = new File(destinationDir, variant.baseName)
        source = files(variant.javaCompile.source)
        classpath = files(android.plugin.runtimeJarList, variant.javaCompile.classpath)
        exclude '**/R.html', '**/R.*.html'
    }


	task ourJar(type: Jar) {
        from variant.javaCompile.destinationDir
        from variant.processResources.resDir
    }

	task javadocJar(type: Jar, dependsOn: javadocRelease) {
		from javadocRelease.destinationDir
	    classifier = 'javadoc'
	}
	
	task sourcesJar(type: Jar) {
        from variant.javaCompile.source
	    classifier = 'sources'
	}

	artifacts {
	    archives ourJar
	    
		archives javadocJar
		archives sourcesJar
	}
		
}




if(isReleaseBuild || isCiBuild) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

uploadArchives {
    repositories {
     if (isDevBuild) {
         mavenLocal()
     } else {
         mavenDeployer {

                if(isReleaseBuild || isCiBuild) { 
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeRepositoryUrl) {
                  authentication(userName: nexusUsername, password: nexusPassword)
                }
                
             pom.project {
                 name project.name
                 packaging 'jar'
                 description project.description
                 url 'http://sneer.me'
        scm {
            url 'https://github.com/sneerteam/snapi'
            connection 'git@github.com:sneerteam/snapi.git'
        }
        licenses {
            license {
             name 'The GNU Lesser General Public License, version 3.0 (LGPL-3.0)'
                url 'http://opensource.org/licenses/lgpl-3.0.html'
                distribution 'repo'
            }
        }
                   developers {
                       developer {
                           id 'klauswuestefeld'
                           name 'Klaus Wuestefeld'
                           email 'klauswuestefeld@gmail.com'
                       }
                       developer {
                           id 'fabioroger'
                           name 'Fabio Roger Manera'
                           email 'fabioroger@gmail.com'
                       }
                       developer {
                           id 'bamboo'
                           name 'Rodrigo B. de Oliveira'
                           email 'rbo@acm.org'
                       }
                       developer {
                           id 'felipebueno'
                           name 'Felipe Bueno'
                           email 'bueno.felipe@gmail.com'
                       }
                   }
             }
   }
        }
    }
}

defaultTasks 'copyLibs'
