package sneer.impl.simulator;

import rx.*;
import rx.subjects.*;
import sneer.*;
import sneer.commons.exceptions.*;
import sneer.rx.*;


public class PartySimulator implements Party, Profile {

	private final ObservedSubject<PublicKey> publicKey;

	/** The name this Party gives itself. */
	private final BehaviorSubject<String> name;

	/** Profile */
	private BehaviorSubject<String> preferredNickname;
	private BehaviorSubject<String> city;
	private BehaviorSubject<String> country;
	private BehaviorSubject<byte[]> selfie;
	
	
	public PartySimulator(String name, PrivateKey prik) {
		this(name, prik.publicKey());
	}
	
	
	PartySimulator(PublicKey puk) {
		this("?", puk);
	}


	PartySimulator(String name, PublicKey puk) {
		this.publicKey = ObservedSubject.create(puk);
		this.name = BehaviorSubject.create(name);
	}


	@Override
	public Observed<PublicKey> publicKey() {
		return publicKey.observed();
	}

	
	@Override
	public Observable<String> name() {
		return name.asObservable();
	}

	
	public void setName(String newName) {
		name.onNext(newName);
	}

	public Observed<PrivateKey> privateKey() {
		return null;
	}

	
	/////////////////////// Profile
	@Override
	public Observable<String> preferredNickname() {	
		return BehaviorSubject.create("dude");
	}


	@Override
	public void setPreferredNickname(String newPreferredNickname) {
		preferredNickname.onNext(newPreferredNickname);
	}


	@Override
	public Observable<byte[]> selfie() {
//		byte[] decodedBytes = null;
//		try {
//			decodedBytes = Base64.decode("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");
//		} catch (Base64DecodingException e) {
//			e.printStackTrace();
//		}
//		return BehaviorSubject.create(decodedBytes);
		return null;
	}


	@Override
	public void setSelfie(byte[] newSelfie) throws FriendlyException {
		selfie.onNext(newSelfie);
	}


	@Override
	public Observable<String> country() {
		return BehaviorSubject.create("Brazil");
	}


	@Override
	public void setCountry(String newCountry) {
		country.onNext(newCountry);
	}


	@Override
	public Observable<String> city() {
		return BehaviorSubject.create("Limeira");
	}


	@Override
	public void setCity(String newCity) {
		city.onNext(newCity);
		
	}

}
