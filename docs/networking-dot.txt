//To produce an image called networking.png using this input file:
//apt-get install graphviz
//dot -Tpng -onetworking.png networking-dot.txt

//sneer.async
//  committed [chan]
//    "Returns a channel that will forward to chan following every value with :commit."
//    "  E.g.: v1 :commit v2 :commit v3 :commit...
//    "  If chan has no buffer, this will result in chan blocking until the consumer of the returned channel has taken the value and the :commit."
//    "  This can be used to synchronize producer and consumer, much like a function call."
//
//
//CLIENT:
//
//  defprotocol RouterConnection
//    queue-for [receiver-puk]
//      "Returns a committed channel for the outgoing tuples for the receiver."
//    tuples-in []
//	"Returns a committed channel for incoming tuples."
//
//  open-router-connection [host own-puk]
//    "Returns a RouterConnection to the host and port using UDP port 7777."
//
//  start-dispatching-tuples [tuplebase router-connection]
//
//
//SERVER:
//
//  defprotocol Router
//    enqueue [from-puk to-puk tuple]
//      "Returns true if the tuple was enqueued to be forwarded, false if the queue was full."
//    tuples-for [receiver]
//      "Returns a committed channel for the outgoing tuples to receiver."
//
//  start-router []
//    "Returns a Router."
//
//  serve-router-connections [router]
//    "Opens UDP port 7777 and services incoming connections."


//Using fns instead of committed channels:
//
//CLIENT:
//
//  defprotocol RouterConnection
//    queue-for [receiver-puk]
//      "Returns a fn for the outgoing tuples for the receiver."
//    init-consumer-for-tuples-in [fn]
//	"Registers the fn that will handle tuples-in."
//
//  open-router-connection [own-puk]
//    "Returns a RouterConnection to the server at dynamic.sneer.me:7777 using UDP."
//
//  start-dispatching-tuples [tuplebase router-connection]
//
//
//SERVER:
//
//  defprotocol Router
//    enqueue [from-puk to-puk tuple]
//      "Returns true if the tuple was enqueued to be forwarded, false if the queue was full."
//    init-consumer-for-tuples-for [receiver]
//	"Registers the fn that will handle tuples to receiver."
//
//  start-router []
//    "Returns a Router."
//
//  serve-router-connections [router]
//    "Opens UDP port 7777 and services incoming connections."


digraph {

	splines=line;

	subgraph cluster_udp { label="UDP";
		UDP;
	}

	subgraph cluster_client { label="Client";
		"open-router-connection" -> RouterConnection [style=dashed, arrowhead=onormal];
		"open-router-connection" -> UDP;
		"start-dispatching-tuples" -> { TupleBase RouterConnection };
		"client-main" -> { "open-router-connection" "start-dispatching-tuples" }
	}

	subgraph cluster_server { label="Server";
		"start-router" -> Router [style=dashed, arrowhead=onormal];
		"serve-router-connections" -> { UDP Router }
		"server-main" -> { "start-router" "serve-router-connections" }
	}

}
