apply plugin: 'com.android.library'
apply from: '../sdktools.gradle'

version = '0.1.7'
description = 'API for Sneer, the sovereign platform.'
ext.packaging = 'jar'

apply from: '../../sonatype.gradle'

android {
  lintOptions {
    abortOnError false
  }

  compileSdkVersion project.getSDKIfPossible(23)
  buildToolsVersion project.getHighestAvailableTools("23.0.0")


  defaultConfig {
    minSdkVersion external.android.minSdkVersion
    targetSdkVersion external.android.sdkVersion
    versionCode 1
    versionName "1.0"
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

android.libraryVariants.all { variant ->
  if (!variant.name.equals("release")) return

  task javadocRelease(type: Javadoc) {
    description = "Generates javadoc for release"
    destinationDir = new File(destinationDir, variant.baseName)
    source = variant.javaCompile.source
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
  }

  task ourJar(type: Jar) {
    from variant.javaCompile.destinationDir
  }

  task javadocJar(type: Jar, dependsOn: javadocRelease) {
    from javadocRelease.destinationDir
    classifier = 'javadoc'
  }

  task sourcesJar(type: Jar) {
    from variant.javaCompile.source
    classifier = 'sources'
  }

  artifacts {
    archives ourJar
    archives javadocJar
    archives sourcesJar
  }

}
