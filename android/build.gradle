import java.nio.file.*;
import org.gradle.api.artifacts.*;

ext {
    external = [
        rx: [version: '0.20.0'],
        android: [
            sdkVersion: 19,
            minSdkVersion: 16,
            buildToolsVersion: '19.0.3'
        ]
    ]
}

buildscript {
    repositories {
        mavenCentral()
    }
}

allprojects {
    group = 'me.sneer'
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {

    apply plugin: 'eclipse'

    afterEvaluate {

        sourceCompatibility = 1.6
        targetCompatibility = 1.6

        task configureAndroidForEclipseTask << {
            new File("project.properties").withWriter { writer ->
                writer << "target=${android.compileSdkVersion}\n"
                if (plugins.hasPlugin('android-library')) {
                    writer << "android.library=true\n"
                }
                def count = 0;
                configurations.each { conf ->
                    conf.dependencies.findAll {it instanceof ProjectDependency}.findAll{it.dependencyProject.plugins.hasPlugin('android-library')}.each {
                        count++
                        def relative = Paths.get(projectDir.toURI()).relativize(Paths.get(it.dependencyProject.projectDir.toURI())).toString()
                        writer << "android.library.reference.${count}=${relative}\n"
                    }
                }
            }
            eclipse {
                project {
                    natures 'com.android.ide.eclipse.adt.AndroidNature'
                    buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
                    buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
                    buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'
                }

                classpath {
                    file {
                        withXml {
                            def node = it.asNode()
                            node.appendNode('classpathentry', [kind: 'src', path: 'src'])
                            node.appendNode('classpathentry', [kind: 'src', path: 'gen'])

                            configurations.collect { conf ->
                                conf.dependencies.findAll {it instanceof ExternalModuleDependency}.collect{conf.files(it)}
                            }.flatten().unique().each { f ->
                                node.appendNode('classpathentry', [kind: 'lib', path: f, exported: true])
                            }

                            configurations.each { conf ->
                                conf.dependencies.findAll {it instanceof ProjectDependency}.each {
                                    node.appendNode('classpathentry', [kind: 'src', path: "/${it.dependencyProject.name}", exported: true])
                                }
                            }

                            node.appendNode('classpathentry', [kind: 'con', path: 'com.android.ide.eclipse.adt.LIBRARIES', exported: true])
                            node.appendNode('classpathentry', [kind: 'con', path: 'com.android.ide.eclipse.adt.DEPENDENCIES', exported: true])
                            node.appendNode('classpathentry', [kind: 'con', path: 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK'])
                        }
                    }
                }
            }
        }
        tasks.eclipse.dependsOn(cleanEclipse)
        tasks.eclipse.dependsOn(configureAndroidForEclipseTask)
    }
}
